<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<configuration>
    <!-- when working with different users on Hive table -->
    <property>
        <name>hive.warehouse.subdir.inherit.perms</name>
        <value>false</value>
    </property>
    <property>
        <name>hive.exec.scratchdir</name>
        <value>maprfs:///tmp/hive</value>
        <description>Scratch space for Hive jobs</description>
    </property>
    <property>
        <name>hive.compactor.initiator.on</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.compactor.worker.threads</name>
        <value>1</value>
    </property>
    <property>
        <name>hive.exec.dynamic.partition</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.exec.dynamic.partition.mode</name>
        <value>nonstrict</value>
    </property>
    <property>
        <name>hive.support.concurrency</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.zookeeper.quorum</name>
        <value>{{ zookeeper_string }}</value>
    </property>
    <property>
        <name>hive.zookeeper.client.port</name>
        <value>5181</value>
    </property>
    <property>
        <name>hive.txn.manager</name>
        <value>org.apache.hadoop.hive.ql.lockmgr.DbTxnManager</value>
    </property>
    <property>
        <name>hive.metastore.schema.verification</name>
        <value>false</value>
    </property>
    <property>
        <name>hive.metastore.uris</name>
        <value>{{ metastore_string }}</value>
    </property>
    {% if hive_with_tez %}
    <property>
        <name>hive.execution.engine</name>
        <value>tez</value>
    </property>
    {% endif %}
    <!-- Database -->
    {% if mysql_hosts is defined and hive_db_type == 'mysql' %}
    {% if hive_db_jdbc_url is defined %}
    <property>
        <name>javax.jdo.option.ConnectionURL</name>
        <value>{{ hive_db_jdbc_url }}</value>
        <description>JDBC connect string for a JDBC metastore</description>
    </property>
    {% else %}
    <property>
        <name>javax.jdo.option.ConnectionURL</name>
        <value>jdbc:mysql://{{ hive_db_host }}:3306/{{ hive_db_schema }}?createDatabaseIfNotExist=true&amp;autoReconnect=true&amp;useSSL=false</value>
        <description>JDBC connect string for a JDBC metastore</description>
    </property>
    {% endif %}
    <property>
        <name>javax.jdo.option.ConnectionDriverName</name>
        <value>com.mysql.cj.jdbc.Driver</value>
        <description>Driver class name for a JDBC metastore</description>
    </property>

    <property>
        <name>javax.jdo.option.ConnectionUserName</name>
        <value>{{ hive_db_user }}</value>
        <description>username to use against metastore database</description>
    </property>
    {% if hive_db_encrypt_password %}
    <property>
        <name>hadoop.security.credential.provider.path</name>
        <value>jceks://maprfs/user/mapr/hivemetastore.jceks</value>
        <description>password to use against metastore database</description>
    </property>
    {% else %}
    <property>
        <name>javax.jdo.option.ConnectionPassword</name>
        <value>{{ hive_db_password }}</value>
        <description>password to use against metastore database</description>
    </property>
    {% endif %}
    {% elif hive_db_type == 'oracle' %}
    <property>
        <name>javax.jdo.option.ConnectionURL</name>
        <value>{{ hive_db_jdbc_url }}</value>
        <description>JDBC connect string for a JDBC metastore</description>
    </property>

    <property>
        <name>javax.jdo.option.ConnectionDriverName</name>
        <value>oracle.jdbc.OracleDriver</value>
        <description>Driver class name for a JDBC metastore</description>
    </property>

    <property>
        <name>javax.jdo.option.ConnectionUserName</name>
        <value>{{ hive_db_user }}</value>
        <description>username to use against metastore database</description>
    </property>
    {% if hive_db_encrypt_password %}
    <property>
        <name>hadoop.security.credential.provider.path</name>
        <value>jceks://maprfs/user/mapr/hivemetastore.jceks</value>
        <description>password to use against metastore database</description>
    </property>
    {% else %}
    <property>
        <name>javax.jdo.option.ConnectionPassword</name>
        <value>{{ hive_db_password }}</value>
        <description>password to use against metastore database</description>
    </property>
    {% endif %}
    {% else %}
    <property>
        <name>datanucleus.schema.autoCreateAll</name>
        <value>true</value>
    </property>
    {% endif %}

    <!-- security -->
    {% if hive_server_security != 'none' %}
    <property>
        <name>hive.conf.restricted.list</name>
        <value>hive.security.authenticator.manager,hive.security.authorization.manager,hive.security.metastore.authorization.manager,hive.security.metastore.authenticator.manager,hive.users.in.admin.role,hive.server2.xsrf.filter.enabled,hive.security.authorization.enabled,hive.server2.authentication.ldap.baseDN,hive.server2.authentication.ldap.url,hive.server2.authentication.ldap.Domain,hive.server2.authentication.ldap.groupDNPattern,hive.server2.authentication.ldap.groupFilter,hive.server2.authentication.ldap.userDNPattern,hive.server2.authentication.ldap.userFilter,hive.server2.authentication.ldap.groupMembershipKey,hive.server2.authentication.ldap.userMembershipKey,hive.server2.authentication.ldap.groupClassKey,hive.server2.authentication.ldap.customLDAPQuery,hive.exec.pre.hooks,hive.exec.post.hooks,hive.exec.failure.hooks,hive.exec.query.redactor.hooks,hive.semantic.analyzer.hook,hive.query.lifetime.hooks,hive.exec.driver.run.hooks,hive.server2.session.hook</value>
    </property>
    <property>
        <name>hive.security.authorization.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.security.authorization.manager</name>
        <value>org.apache.hadoop.hive.ql.security.authorization.plugin.fallback.FallbackHiveAuthorizerFactory</value>
    </property>
    <property>
        <name>hive.metastore.execute.setugi</name>
        <value>false</value>
    </property>
    {% endif %}

    {% if hive_server_security == 'none' %}
    <property>
        <name>hive.server2.enable.doAs</name>
        <value>false</value>
    </property>
    <property>
        <name>hive.metastore.execute.setugi</name>
        <value>true</value>
    </property>
    {% elif hive_server_security == 'pam' %}
    <!-- For hive server2 and meta store -->
    <property>
        <name>hive.server2.authentication</name>
        <value>PAM</value>
    </property>

    <property>
        <name>hive.server2.authentication.pam.services</name>
        <value>login,sudo</value>
        <description>comma separated list of pam modules to verify</description>
    </property>
    {% elif hive_server_security == 'maprsasl' %}
    <property>
        <name>hive.server2.authentication</name>
        <value>MAPRSASL</value>
    </property>
    {% elif hive_server_security == 'kerberos' %}
    <property>
        <name>hive.server2.authentication</name>
        <value>KERBEROS</value>
    </property>
    <property>
        <name>hive.server2.authentication.kerberos.principal</name>
        <value>{{ mapr_user }}/_HOST@{{ mapr_kerberos_realm }}</value>
        <description>HiveServer2 principal. If _HOST is used as the FQDN portion, it will be replaced with the actual hostname of the running instance.</description>
    </property>
    <property>
        <name>hive.server2.authentication.kerberos.keytab</name>
        <value>/opt/mapr/conf/mapr.keytab</value>
        <description>Keytab file for HiveServer2 principal</description>
    </property>
    <property>
        <name>hive.metastore.kerberos.keytab.file</name>
        <value>/opt/mapr/conf/mapr.keytab</value>
        <description>The path to the Kerberos Keytab file containing the metastore thrift server's service principal.</description>
    </property>
    <property>
        <name>hive.metastore.kerberos.principal</name>
        <value>{{ mapr_user }}/_HOST@{{ mapr_kerberos_realm }}</value>
        <description>The service principal for the metastore thrift server. The special string _HOST will be replaced automatically with the correct hostname.</description>
    </property>
    {% endif %}

    {% if hive_server_security != 'none' %}
    <property>
        <name>hive.server2.enable.doAs</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.metastore.sasl.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.server2.thrift.sasl.qop</name>
        <value>auth-conf</value>
    </property>
    <property>
        <name>hive.cluster.delegation.token.store.class</name>
        <value>org.apache.hadoop.hive.thrift.DBTokenStore</value>
    </property>
    <property>
        <name>hive.security.metastore.authorization.manager</name>
        <value>org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider</value>
        <description>authorization manager class name to be used in the metastore for authorization.
            The user defined authorization class should implement interface
            org.apache.hadoop.hive.ql.security.authorization.HiveMetastoreAuthorizationProvider.
        </description>
    </property>

    <property>
        <name>hive.security.metastore.authenticator.manager</name>
        <value>org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator</value>
        <description>authenticator manager class name to be used in the metastore for authentication.
            The user defined authenticator should implement interface
            org.apache.hadoop.hive.ql.security.HiveAuthenticationProvider.
        </description>
    </property>

    <property>
        <name>hive.metastore.pre.event.listeners</name>
        <value>org.apache.hadoop.hive.ql.security.authorization.AuthorizationPreEventListener</value>
        <description>pre-event listener classes to be loaded on the metastore side to run code
            whenever databases, tables, and partitions are created, altered, or dropped.
            Set to org.apache.hadoop.hive.ql.security.authorization.AuthorizationPreEventListener
            if metastore-side authorization is desired.
        </description>
    </property>
    {% endif %}
    {% if hive_server_ui_ssl %}
    <property>
        <name>hive.server2.webui.use.pam</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.server2.webui.use.ssl</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.server2.webui.keystore.path</name>
        <value>/opt/mapr/conf/ssl_keystore</value>
    </property>
    <property>
        <name>hive.server2.webui.keystore.password</name>
        <value>mapr123</value>
    </property>
    {% endif %}
    {% if hive_server_jdbc_ssl %}
    <property>
        <name>hive.server2.use.SSL</name>
        <value>true</value>
    </property>
    <!-- always this config but not enabled -->
    <property>
        <name>hive.server2.keystore.path</name>
        <value>/opt/mapr/conf/ssl_keystore</value>
    </property>
    <property>
        <name>hive.server2.keystore.password</name>
        <value>mapr123</value>
    </property>
    {% else %}
    <property>
        <name>hive.server2.use.SSL</name>
        <value>false</value>
    </property>
    {% endif %}
    <property>
        <name>hive.users.in.admin.role</name>
        <value>{{ mapr_user }}</value>
    </property>
    <property>
        <name>hive.server2.metrics.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.metastore.metrics.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>hive.service.metrics.reporter</name>
        <value>JSON_FILE,JMX</value>
    </property>
    <property>
        <name>hive.service.metrics.file.location</name>
        <value>/tmp/hive_report.json</value>
    </property>


</configuration>